// ===== FUNDAMENTAL (7 Parts) =====
// Prerequisites: Tidak ada

01_fundamental/
├── 01_variables_and_types.js
│   ├── Variable Declaration (const, let, var)
│   ├── Primitive Types (string, number, boolean, null, undefined, symbol)
│   ├── Complex Types (array, object)
│   ├── Type Conversion
│   └── Destructuring
├── 02_functions.js
│   ├── Function Declaration
│   ├── Function Expression
│   ├── Arrow Functions
│   ├── Parameters & Arguments
│   ├── Return Values
│   ├── Scope (global, local, block)
│   └── Hoisting
├── 03_control_flow.js
│   ├── If/Else Statements
│   ├── Switch Case
│   ├── Ternary Operator
│   └── Logical Operators (&&, ||, !)
├── 04_loops.js
│   ├── For Loop
│   ├── While Loop
│   ├── Do-While Loop
│   ├── For...of Loop
│   ├── For...in Loop
│   └── Break & Continue
├── 05_string_methods.js
│   ├── String Basics
│   ├── charAt, charCodeAt
│   ├── indexOf, lastIndexOf
│   ├── slice, substring, substr
│   ├── split, join
│   ├── toUpperCase, toLowerCase
│   ├── trim, replace
│   ├── startsWith, endsWith
│   └── includes, repeat, padStart, padEnd
├── 06_array_methods.js
│   ├── Mutating Methods (push, pop, shift, unshift, splice, sort, reverse)
│   ├── Non-Mutating Methods (slice, concat, join)
│   ├── Iteration Methods (forEach, map, filter, reduce, find, findIndex)
│   ├── Other Methods (includes, indexOf, every, some, flat, flatMap)
│   └── Array Spread & Rest
├── 07_sync_async.js
│   ├── Synchronous Code
│   ├── Callbacks
│   ├── Promises (resolve, reject, then, catch, finally)
│   ├── Async/Await
│   ├── Promise.all, Promise.race
│   └── Fetch API Basics
└── exercises/
    ├── 01.js (variables_and_types)
    ├── 02.js (functions)
    ├── 03.js (control_flow)
    ├── 04.js (loops)
    ├── 05.js (string_methods)
    ├── 06.js (array_methods)
    └── 07.js (sync_async)

// ===== DOM MANIPULATION (5 Parts) =====
// Prerequisites: Fundamental 1-3

02_dom_manipulation/
├── 01_dom_basics.js
│   ├── What is DOM
│   ├── Selecting Elements (getElementById, querySelector, querySelectorAll)
│   ├── Traversing DOM (parentElement, children, siblings)
│   ├── Creating Elements (createElement, appendChild, insertBefore)
│   ├── Removing Elements (removeChild, remove)
│   └── Cloning Elements (cloneNode)
├── 02_dom_properties_attributes.js
│   ├── textContent vs innerHTML
│   ├── Getting/Setting Attributes
│   ├── classList Methods (add, remove, toggle, contains)
│   ├── Style Properties
│   └── Data Attributes (dataset)
├── 03_events.js
│   ├── Event Listeners (addEventListener, removeEventListener)
│   ├── Event Types (click, change, input, submit, mouseenter, mouseleave)
│   ├── Event Object (target, preventDefault, stopPropagation)
│   ├── Event Bubbling & Capturing
│   └── Event Delegation
├── 04_form_handling.js
│   ├── Form Events (submit, input, change)
│   ├── Form Validation
│   ├── Form Data Collection
│   ├── Handling File Inputs
│   └── FormData API
├── 05_advanced_dom.js
│   ├── Performance (innerHTML vs appendChild)
│   ├── Document Fragment
│   ├── Template Literals in DOM
│   ├── Dynamic Component Creation
│   └── Animations with JavaScript
└── exercises/
    ├── 01.js (dom_basics)
    ├── 02.js (dom_properties)
    ├── 03.js (events)
    ├── 04.js (form_handling)
    └── 05.js (advanced_dom)

// ===== OOP (Object-Oriented Programming) (6 Parts) =====
// Prerequisites: Fundamental 1-2, DOM 1

03_oop/
├── 01_objects_basics.js
│   ├── Object Literals
│   ├── Object Methods
│   ├── This Keyword
│   ├── Object.create()
│   └── Object.assign()
├── 02_classes.js
│   ├── Class Declaration
│   ├── Constructor
│   ├── Instance Methods
│   ├── Static Methods
│   ├── Getters & Setters
│   └── Private Fields (#)
├── 03_inheritance.js
│   ├── Prototype Chain
│   ├── Extends & Super
│   ├── Method Overriding
│   ├── Instanceof Operator
│   └── instanceof vs typeof
├── 04_polymorphism.js
│   ├── Method Overloading Patterns
│   ├── Duck Typing
│   ├── Interface-like Patterns
│   └── Mixin Pattern
├── 05_encapsulation.js
│   ├── Public Properties
│   ├── Private Properties
│   ├── Protected Properties (convention)
│   ├── Getters & Setters
│   └── Data Validation
├── 06_design_patterns.js
│   ├── Singleton Pattern
│   ├── Factory Pattern
│   ├── Observer Pattern
│   ├── Module Pattern
│   └── Revealing Module Pattern
└── exercises/
    ├── 01.js (objects_basics)
    ├── 02.js (classes)
    ├── 03.js (inheritance)
    ├── 04.js (polymorphism)
    ├── 05.js (encapsulation)
    └── 06.js (design_patterns)

// ===== ADVANCED (8 Parts) =====
// Prerequisites: Fundamental 1-7, OOP 1-3

04_advanced/
├── 01_closures.js
│   ├── Closure Concept
│   ├── Lexical Scoping
│   ├── Data Privacy with Closures
│   ├── Closure in Loops
│   └── Practical Examples (counters, cache)
├── 02_higher_order_functions.js
│   ├── Functions as First-Class Objects
│   ├── Functions as Parameters
│   ├── Functions as Return Values
│   ├── Currying
│   ├── Partial Application
│   └── Function Composition
├── 03_destructuring_spread.js
│   ├── Array Destructuring (advanced)
│   ├── Object Destructuring (advanced)
│   ├── Nested Destructuring
│   ├── Rest Parameters (...)
│   ├── Spread Operator (...)
│   └── Default Values
├── 04_error_handling.js
│   ├── Try-Catch-Finally
│   ├── Throwing Errors
│   ├── Error Types (TypeError, ReferenceError, SyntaxError)
│   ├── Custom Errors
│   ├── Error Handling in Promises
│   ├── Error Handling in Async/Await
│   └── Best Practices
├── 05_this_call_apply_bind.js
│   ├── This Keyword (context)
│   ├── Call Method
│   ├── Apply Method
│   ├── Bind Method
│   ├── Arrow Functions & This
│   └── Practical Examples
├── 06_prototype_prototypal_inheritance.js
│   ├── Prototype Object
│   ├── Prototype Chain
│   ├── Object.create()
│   ├── Constructor Functions
│   ├── ES6 Classes vs Prototypes
│   └── instanceof & hasOwnProperty
├── 07_regular_expressions.js
│   ├── RegExp Basics
│   ├── Pattern Matching
│   ├── Character Classes
│   ├── Quantifiers
│   ├── Anchors (^, $)
│   ├── Groups & Alternation
│   ├── String Methods (match, replace, split, test, exec)
│   └── Practical Examples (validation, parsing)
├── 08_performance_optimization.js
│   ├── Performance Monitoring
│   ├── Debouncing & Throttling
│   ├── Lazy Loading
│   ├── Memoization
│   ├── Memory Management
│   ├── Event Delegation Performance
│   └── Best Practices
└── exercises/
    ├── 01.js (closures)
    ├── 02.js (higher_order_functions)
    ├── 03.js (destructuring_spread)
    ├── 04.js (error_handling)
    ├── 05.js (this_call_apply_bind)
    ├── 06.js (prototype_inheritance)
    ├── 07.js (regular_expressions)
    └── 08.js (performance_optimization)

